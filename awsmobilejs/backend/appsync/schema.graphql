input CreatePictureInput
{
id: ID!
name: String
owner: String
createdAt: String}

input DeletePictureInput
{
id: ID!}

type Mutation
{
addPicture(name: String,visibility: Visibility,file: S3ObjectInput ): Picture
createPicture(input: CreatePictureInput! ): Picture
updatePicture(input: UpdatePictureInput! ): Picture
deletePicture(input: DeletePictureInput! ): Picture
}

type Picture
{
id: ID!
name: String
visibility: Visibility
owner: String
file: S3Object
createdAt: String
}

type PictureConnection
{
items: [Picture]
nextToken: String
}

type Query
{
empty: Boolean
getPicture(id: ID! ): Picture
listPictures(first: Int,after: String ): PictureConnection
queryPicturesByOwnerIndex(owner: String!,first: Int,after: String ): PictureConnection
yo: String
}

type S3Object
{
bucket: String!
region: String!
key: String!
}

input S3ObjectInput
{
bucket: String!
region: String!
localUri: String
visibility: Visibility
key: String
mimeType: String}

type Subscription
{
onCreatePicture(id: ID,name: String,owner: String,createdAt: String ): Picture
@aws_subscribe(mutations: ["createPicture"])
onUpdatePicture(id: ID,name: String,owner: String,createdAt: String ): Picture
@aws_subscribe(mutations: ["updatePicture"])
onDeletePicture(id: ID,name: String,owner: String,createdAt: String ): Picture
@aws_subscribe(mutations: ["deletePicture"])
}

input UpdatePictureInput
{
id: ID!
name: String
owner: String
createdAt: String}

enum Visibility
{
public
private
}

schema 
{
query: Query
mutation: Mutation
}
